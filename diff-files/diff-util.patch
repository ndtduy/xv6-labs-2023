diff --git a/Makefile b/Makefile
index 365c91b..4f3fd54 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
 
 
 
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..caaf538
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,92 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+char*
+fmtname(char *path) {
+	static char buf[DIRSIZ + 1];
+	char *p;
+
+	for (p = path + strlen(path); p >= path && *p != '/'; p--);
+	p++;
+	
+	if (strlen(p) >= DIRSIZ) {
+		return p;
+	}
+
+	memset(buf, 0, sizeof(buf));
+	memmove(buf, p, strlen(p));
+
+	return buf;
+}
+
+void 
+find(char *path, char *filename) {
+	char buf[512], *p;
+	int fd;
+	struct dirent de;
+	struct stat st;
+
+	if ((fd = open(path, O_RDONLY)) < 0) {
+		fprintf(2, "find: cannot open %s\n", path);
+		return;
+	}
+
+	if (fstat(fd, &st) < 0) {
+		fprintf(2, "find: cannot stat %s\n", path);
+		close(fd);
+		return;
+	}
+
+	switch (st.type) {
+	case T_DEVICE:
+	case T_FILE:
+		fprintf(2, "find: %s is not a directory\n", path);
+		break;
+	case T_DIR:
+		if (strlen(path) + 1 + DIRSIZ + 1 > sizeof(buf)) {
+			printf("find: path too long\n");
+			break;
+		}
+
+		strcpy(buf, path);
+		p = buf + strlen(buf);
+		*p++ = '/';
+
+		while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+			if (de.inum == 0) continue;
+			if (strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0) continue;
+			
+			memmove(p, de.name, DIRSIZ);
+			p[DIRSIZ] = '\0';
+			if (stat(buf, &st) < 0) {
+				fprintf(2, "find: cannot stat %s\n", buf);
+				continue;
+			}
+
+			if (st.type == T_DIR) {
+				find(buf, filename);
+			}
+			else if (st.type == T_DEVICE || st.type == T_FILE) {
+				if (strcmp(fmtname(buf), filename) == 0) {
+					printf("%s\n", buf);
+				}
+			}
+		}
+		break;
+	}
+	close(fd);
+}
+
+int
+main(int argc, char **argv) {
+	if (argc < 3) {
+		fprintf(2, "Usage: Find all files with specific name...\n");
+		exit(1);
+	}
+
+	find(argv[1], argv[2]);
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..4311984
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,38 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char **argv) {
+	int p[2];
+	pipe(p);
+
+	char buf[1];
+	int pid = fork();
+	if (pid == 0) {
+		read(p[0], buf, 1);
+		if (buf[0] == 1) {
+			printf("%d: received ping\n", pid);
+			buf[0] = 2;
+		}
+		write(p[1], buf, 1);
+
+		close(p[0]);
+		close(p[1]);
+		exit(0);
+	}
+	else {
+		buf[0] = 1;
+		write(p[1], buf, 1);
+		wait(0);
+		read(p[0], buf, 1);
+		if (buf[0] == 2) {
+			printf("%d: received pong\n", pid);
+		}
+
+		close(p[0]);
+		close(p[1]);
+		exit(0);
+	}
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..62e7ac7
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,61 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+void
+filter(int *oldp)
+{
+  int n, buf;
+  int newp[2];
+  pipe(newp);
+  close(oldp[1]);
+
+  // read will false when reach the last descriptor.
+  if (read(oldp[0], &n, sizeof(int))) {
+    printf("prime %d\n", n);
+    int pId = fork() ;
+    if (pId == 0) {
+      filter(newp);
+      exit(0);
+    } 
+
+    while (read(oldp[0], &buf, sizeof(int))) {
+      if (buf % n != 0) {
+        write(newp[1], &buf, sizeof(int));
+      }
+    }
+    // decrement count of descriptor reference
+    close(newp[0]);
+    close(newp[1]); 
+
+    // wait for OS release "zombie" process
+    wait(0);
+  }
+  close(oldp[0]);
+
+  exit(0);
+}
+
+int
+main(int argc, char *argv[])
+{
+  if (argc > 1) {
+    fprintf(2, "Usage: Prints primes less than 35 \n");
+    exit(1);
+  }
+
+  int p[2];
+  pipe(p);
+
+  if (fork() == 0) {
+    filter(p);
+    exit(0);
+  } 
+
+  for (int i = 2; i <= 35; ++i) {
+    write(p[1], &i, sizeof(int));
+  }
+  close(p[1]);
+  close(p[0]);
+  wait(0);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..dee9349
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char **argv) {
+	if (argc < 2) {
+		fprintf(2, "Usage: Sleep for a while...");
+		exit(1);
+	}
+
+	if (sleep(atoi(argv[1])) == -1) {
+		fprintf(2, "Error: Sleep system call error...");
+		exit(1);
+	}
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..56817eb
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,56 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+void 
+xargs_exec(char **xargv) {
+	int pid = fork();
+	if (pid < 0) {
+		fprintf(2, "Error: Fork system call error\n");
+		exit(1);
+	}
+
+	if (pid == 0) {
+		exec(xargv[0], xargv);
+		exit(0);
+	}
+	else wait(0);
+}
+
+int
+main(int argc, char **argv) {
+	if (argc < 2) {
+		fprintf(2, "Usage: Run command from standard input\n");
+		exit(1);
+	}
+
+	char *xargv[MAXARG];
+	int xargc = argc - 1;
+	memset(xargv, 0, sizeof(xargv));
+	int i;
+	for (i = 0; i < xargc; i++) {
+		xargv[i] = argv[i + 1];
+	}
+
+	char buf[512];
+	struct stat st;
+	if (fstat(0, &st) < 0) { // if cannot stat from standard input
+		i = 0;
+		memset(buf, 0, sizeof(buf));
+		xargv[xargc] = buf;
+		while (read(0, &buf[i], 1) > 0) { // read a byte from standard input
+			if (buf[i] == '\n') {
+				buf[i] = '\0';
+				xargs_exec(xargv);
+				i = 0;
+				memset(buf, 0, sizeof(buf));
+			}
+			else i++;
+		}
+
+		if (buf[i] != 0) xargs_exec(xargv);
+	}
+	else xargs_exec(xargv);
+	exit(0);
+}
\ No newline at end of file
