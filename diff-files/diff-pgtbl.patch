diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..fd6f6e6 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t page);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..9e22dd5 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,6 +128,7 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1) vmprint(p->pagetable);
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 74d2fd4..f31d11e 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -72,7 +72,6 @@
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
 #ifdef LAB_PGTBL
 #define USYSCALL (TRAPFRAME - PGSIZE)
-
 struct usyscall {
   int pid;  // Process ID
 };
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..741847b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -1,5 +1,8 @@
 #include "types.h"
 #include "param.h"
+#ifndef LAB_PGTBL
+#define LAB_PGTBL
+#endif
 #include "memlayout.h"
 #include "riscv.h"
 #include "spinlock.h"
@@ -132,6 +135,16 @@ found:
     return 0;
   }
 
+
+// Allocate a usyscall page.
+ if((p->usyscall =  (struct usyscall *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  p->usyscall->pid =  p->pid;
+
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -158,6 +171,12 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+
+// free usyscall
+   if(p->usyscall)
+    kfree((void*)p->usyscall);
+  p->usyscall = 0;
+
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -187,6 +206,11 @@ proc_pagetable(struct proc *p)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
+
+
+
+
+
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
     uvmfree(pagetable, 0);
@@ -202,6 +226,15 @@ proc_pagetable(struct proc *p)
     return 0;
   }
 
+  // map physical pages to usyscall page
+  if(mappages(pagetable, USYSCALL, PGSIZE, (uint64)(p->usyscall), PTE_R | PTE_U) < 0) {
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(pagetable, TRAPFRAME, 1, 0);
+
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
   return pagetable;
 }
 
@@ -212,6 +245,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..0713123 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -99,6 +99,7 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
+  struct usyscall *usyscall;     // Kernel page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..4fed8d9 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_A (1L << 6) // access bit (the value is according to RISC-V privileged architecture manual)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 88644b2..e2b54f2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -74,7 +74,28 @@ sys_sleep(void)
 int
 sys_pgaccess(void)
 {
-  // lab pgtbl: your code here.
+  uint64 curAddr, userAddr;
+  int numPages;
+  argaddr(0, &curAddr);
+  argint(1, &numPages);
+  argaddr(2, &userAddr);
+
+  uint64 bitmask = 0;
+  pagetable_t curPgtbl = myproc() -> pagetable;
+
+  for (int i = 0; i < numPages; i++) {
+    pte_t *pte = walk(curPgtbl, curAddr, 0);
+    if ((*pte) & PTE_A) {
+      bitmask |= (1 << i);
+      *pte &= ~(PTE_A); // clear PTE_A
+    }
+    curAddr += PGSIZE;
+  }
+
+  if (copyout(curPgtbl, userAddr, (char*)&bitmask, sizeof(bitmask)) < 0) {
+    return -1;
+  }
+
   return 0;
 }
 #endif
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..8c03ee5 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -449,3 +449,33 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+
+void
+vmprintwalk(pagetable_t pagetable, int deep)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for (int i = 0; i < 512; i++) {
+    pte_t pte = pagetable[i];
+    if (pte & PTE_V) {
+      for (int i = 0; i <= deep; ++i) {
+        printf("..");
+        if(i < deep)
+          printf(" ");
+      }
+      printf("%d: pte %p pa %p\n", i, pte, PTE2PA(pte));
+
+      if ((pte & (PTE_R | PTE_W | PTE_X)) == 0) {
+        // this PTE points to a lower-level page table.
+        uint64 child = PTE2PA(pte);
+        vmprintwalk((pagetable_t)child, deep + 1);
+      }
+    }
+  }
+}
+
+ void vmprint(pagetable_t pagetable){
+
+  printf("page table %p\n", pagetable);
+  vmprintwalk(pagetable, 0);
+ }
\ No newline at end of file
